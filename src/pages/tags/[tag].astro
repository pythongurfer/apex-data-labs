---
import PageLayout from '~/layouts/PageLayout.astro';
import { getCollection } from 'astro:content';
import type { GetStaticPaths } from 'astro';

export const prerender = true;

export const getStaticPaths = (async () => {
  const posts = (await getCollection('post'))
    .filter((post) => post.data.draft !== true);
  
  // Extract unique tags
  const uniqueTags = [...new Set(posts.flatMap((post) => post.data.tags || []))];
  
  // Create a path for each tag
  return uniqueTags.map((tag) => {
    const filteredPosts = posts.filter((post) => post.data.tags && post.data.tags.includes(tag));
    return {
      params: { tag },
      props: { 
        tag,
        posts: filteredPosts.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
      },
    };
  });
});

const { tag, posts } = Astro.props;

const metadata = {
  title: `Articles tagged with "${tag}"`,
  description: `Browse all articles related to ${tag}`,
};
---

<PageLayout metadata={metadata}>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <div class="mb-10 text-center">
      <p class="text-base text-blue-600 dark:text-blue-200 font-semibold tracking-wide uppercase">Tagged Articles</p>
      <h1 class="text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4">{`Articles tagged: ${tag}`}</h1>
      <p class="text-xl text-gray-600 dark:text-slate-400">{`Browse our collection of articles about ${tag}`}</p>
    </div>
    
    <ul class="grid gap-8">
      {posts.map((post) => (
        <li class="bg-white dark:bg-slate-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
          <a href={`/articles/${post.slug}`}>
            {post.data.image && (
              <img 
                src={post.data.image.startsWith('~/assets') 
                  ? post.data.image.replace('~/assets', '') 
                  : post.data.image} 
                alt={post.data.imageAlt || post.data.title || ''} 
                class="rounded-md mb-4 w-full h-40 object-cover" 
                onerror="this.onerror=null; this.src='/placeholder-image.jpg';"
              />
            )}
            <div class="p-6">
              <h3 class="text-2xl font-bold mb-2 text-gray-900 dark:text-white">{post.data.title}</h3>
              <p class="text-gray-600 dark:text-gray-400">{post.data.excerpt}</p>
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="mt-4">
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map((postTag) => (
                      <span class={`text-xs font-medium px-2.5 py-0.5 rounded ${
                        postTag === tag 
                          ? 'bg-blue-500 text-white dark:bg-blue-600' 
                          : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300'
                      }`}>
                        {postTag}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              <div class="mt-4 text-sm text-gray-500">
                {new Date(post.data.publishDate).toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </div>
            </div>
          </a>
        </li>
      ))}
    </ul>
  </section>
</PageLayout>